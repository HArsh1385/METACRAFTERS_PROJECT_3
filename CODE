// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingSystem {
    struct Candidate {
        string name;
        uint256 votes;
        bool isRegistered;
    }

    struct Voter {
        bool hasVoted;
        bool isRegistered;
    }

    mapping(address => Candidate) public candidatesRegistry;
    mapping(address => Voter) public votersRegistry;
    address private contractAdmin;

    modifier onlyAdmin() {
        require(msg.sender == contractAdmin, "Only the admin can perform this action");
        _;
    }

    modifier hasNotVoted() {
        require(!votersRegistry[msg.sender].hasVoted, "You have already voted");
        _;
    }

    constructor() {
        contractAdmin = msg.sender;
    }

    function registerCandidate(address candidateAddress, string memory candidateName) public onlyAdmin {
        require(!candidatesRegistry[candidateAddress].isRegistered, "Candidate is already registered");
        require(bytes(candidateName).length > 0, "Candidate name cannot be empty");

        candidatesRegistry[candidateAddress] = Candidate(candidateName, 0, true);
    }

    function castVote(address candidateAddress) public hasNotVoted {
        require(candidatesRegistry[candidateAddress].isRegistered, "Candidate is not registered");

        // Mark voter as having voted
        votersRegistry[msg.sender] = Voter(true, true);

        // Increment candidate vote count
        candidatesRegistry[candidateAddress].votes++;

        // Ensure the vote count is not negative
        assert(candidatesRegistry[candidateAddress].votes >= 0);

        // Additional revert check (for illustration)
        if (candidatesRegistry[candidateAddress].votes < 0) {
            revert("Vote count should not be negative");
        }
    }

    function getCandidateInfo(address candidateAddress) public view returns (string memory, uint256) {
        require(candidatesRegistry[candidateAddress].isRegistered, "Candidate is not registered");
        Candidate memory candidate = candidatesRegistry[candidateAddress];
        return (candidate.name, candidate.votes);
    }
}
